2-7. 예외처리

 // 프로그램 실행중 예기치 못한상태 발생했을때 예외처리 해줌
 
 1. 예외처리
  (1) 개념
   - 예외가 발생할것을 대비하여 프로그램상에서 제어할수 있도록 처리하는 것이다.
   - 오류와는 다른 개념으로, 프로그램 수행 도중 발생할수 있는 장애에 대한 대처이다.
   
  (2) 특징
   - 실행중인 프로그램의 갑작스러운 비정상 종료를 막고 정상적인 실행상태를 유지할수 있도록 한다.
   - try~catch~finally 구문으로 제어한다.
   - 예외를 넘기기 위해 throws를 이용한다 
   
  (3) 방식
   try{
     // 예외가 발생될만한 코드
    }
   catch(FileNotFoundException e){
     // FileNotFoundException이 발생했다면 실행
    }
   catch(IOException e){
     // IOException이 발생했다면 실행
    }
   catch(Exception e){
     // File~, IO~이외의 Exception이 발생했다면 실행
    }
   finally{
     // 예외에 상관없이 무조건 실행
     // 예외의 나머지 처리나, 자원해제등의 역할을 함
    }
    
  (4) 자주 사용되는 예외클래스
   - NullPointerException 
    * 객체를 생성하지 않고 참조할 경우 해당 객체를 참조할수 없어서 발생한다.
    * 인스턴스가 메모리상에 올라가있지 않을때 (즉, new 안했을때)
   - IndexOutOfBoundsException
    * 배열에서 인덱스 범위를 초과했을때 발생한다.
   - NumberFormatException
    * 문자열을 숫자로 변환할때 해당 문자가 숫자형태가 아니라면 발생한다.("ABC"를 숫자로 변환하려고 할때) 
   - ClassCastException
    * 허용되지 않은 타입으로 변환할때 발생한다.
   - IllegalArgumentException
    * 매개변수가 의도치않은 상황을 유발할때 발생한다.
   - ArithmeticException
    * 산술연산에 오류가 있을때 발생한다. (ex: 0으로 나눌때)
    
    
 